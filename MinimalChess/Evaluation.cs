using System;

namespace MinimalChess
{
    public class Evaluation
    {
        public static int LostValue => -9999;

        private static int PieceTableIndex(Piece piece) => ((int)piece >> 2) - 1;

        //a black piece has 2nd bit set, white has not and square ^ 56 flips the file so it works for black
        private static int SquareTableIndex(int square, Piece piece) => square ^ (28 * ((int)piece & 2));

        public static int Evaluate(Board board)
        {
            int midGame = 0;
            int endGame = 0;
            int phase = 0;
            for (int i = 0; i < 64; i++)
            {
                Piece piece = board[i];
                if (piece == Piece.None)
                    continue;
                Color color = Pieces.GetColor(piece);
                int pieceIndex = PieceTableIndex(piece);
                int squareIndex = SquareTableIndex(i, piece);
                phase += PhaseValues[pieceIndex];
                midGame += (int)color * MidgameTables[pieceIndex, squareIndex];
                endGame += (int)color * EndgameTables[pieceIndex, squareIndex];
            }

            double factor = Linstep(Endgame, Midgame, phase);
            double score = factor * midGame + (1 - factor) * endGame;
            return (int)score;
        }

        public static double Linstep(double edge0, double edge1, double v)
        {
            return Math.Min(1, Math.Max(0, (v - edge0) / (edge1 - edge0)));
        }
        /* salsa009b
            385628| +0.405254 
             95413| +0.278245 
             72843| +0.278229 
             81934| +0.292298 
             66260| +0.271792 
             72664| +0.247197 
            103710| +0.198194 
            129342| +0.139312 
            217701| +0.153978 
            202505| +0.191591 
        ----------------------
                    +0.261839 
        */
        static readonly int Midgame = 5395;
        static readonly int Endgame = 360;

        static readonly int[] PhaseValues = new int[6] { 0, 195, 380, 470, 995, 0, };

        static readonly int[,] MidgameTables = new int[6, 64]{
        {  //PAWN
           100,   100,   100,   100,   100,   100,   100,   100,
           122,   118,   110,   131,   149,   138,   107,    73,
            59,    78,    97,    89,   103,   135,    85,    70,
            66,    81,    75,    84,    95,    83,    83,    59,
            46,    75,    70,    87,    86,    77,    80,    45,
            51,    72,    76,    72,    86,    67,   107,    74,
            50,    82,    66,    62,    75,   100,   121,    75,
           100,   100,   100,   100,   100,   100,   100,   100,
        },
        {  //KNIGHT MG
           113,   282,   277,   270,   319,   205,   277,   186,
           255,   291,   378,   333,   380,   367,   314,   310,
           315,   336,   340,   374,   393,   409,   371,   314,
           327,   333,   333,   365,   340,   358,   322,   341,
           309,   322,   334,   331,   341,   340,   326,   300,
           301,   316,   334,   331,   338,   329,   337,   298,
           298,   293,   315,   321,   322,   332,   315,   315,
           268,   299,   275,   293,   293,   306,   295,   251,
        },
        {  //BISHOP MG
           312,   311,   321,   303,   261,   303,   326,   269,
           327,   361,   342,   340,   364,   399,   354,   367,
           339,   358,   392,   370,   400,   389,   384,   378,
           330,   349,   369,   375,   375,   357,   357,   344,
           339,   359,   360,   377,   380,   362,   359,   329,
           368,   366,   367,   361,   366,   367,   360,   365,
           340,   373,   358,   354,   356,   374,   382,   356,
           354,   333,   346,   338,   333,   333,   350,   343,
        },
        {  //ROOK MG
           504,   507,   502,   513,   521,   515,   510,   501,
           487,   479,   506,   532,   502,   533,   531,   513,
           481,   493,   487,   508,   519,   535,   531,   521,
           459,   473,   494,   503,   486,   493,   512,   512,
           456,   457,   456,   472,   475,   471,   486,   475,
           450,   463,   471,   478,   477,   470,   493,   483,
           444,   464,   462,   468,   469,   474,   489,   438,
           465,   469,   482,   484,   486,   474,   456,   468,
        },
        {  //QUEEN MG
           858,   894,   911,   920,   952,   928,   890,   867,
           885,   877,   886,   883,   887,   980,   927,   980,
           883,   895,   913,   928,   944,   958,   982,   947,
           880,   890,   900,   902,   906,   912,   899,   916,
           886,   900,   895,   901,   909,   905,   914,   895,
           887,   903,   901,   903,   904,   909,   912,   898,
           886,   906,   906,   906,   910,   917,   917,   905,
           904,   887,   894,   907,   893,   881,   863,   894,
        },
        {  //KING MG
            27,    23,    19,    22,    18,    24,    18,    16,
            19,    29,    22,    23,    15,    26,     4,    -3,
            17,    32,    20,    17,     1,    12,    17,    -1,
             8,    13,    17,     6,     3,    -6,     2,    -9,
            15,    16,    10,    -8,   -13,   -15,   -14,   -22,
             5,    10,   -67,   -76,   -68,   -35,    -2,   -19,
            24,     2,   -27,   -63,   -49,   -12,    28,    25,
           -28,    28,     7,   -49,     3,   -25,    35,    28,
        }
        };

        static int[,] EndgameTables = new int[6, 64]{
        {  //PAWN EG
           100,   100,   100,   100,   100,   100,   100,   100,
           256,   255,   237,   208,   200,   215,   252,   245,
           188,   185,   172,   157,   143,   135,   165,   169,
           123,   115,   103,    94,    86,    92,   104,   105,
           103,    99,    84,    83,    81,    81,    89,    88,
            96,    96,    83,    91,    87,    88,    89,    83,
           105,   101,    98,   101,    94,    92,    91,    84,
           100,   100,   100,   100,   100,   100,   100,   100,
        },
        {  //KNIGHT EG
           224,   201,   234,   239,   229,   231,   215,   176,
           229,   243,   238,   246,   232,   238,   231,   215,
           231,   243,   270,   267,   249,   255,   238,   237,
           244,   269,   274,   281,   280,   272,   267,   239,
           247,   258,   277,   280,   281,   267,   250,   250,
           239,   259,   260,   273,   272,   266,   250,   233,
           231,   238,   246,   260,   256,   250,   241,   228,
           207,   232,   243,   255,   243,   249,   234,   225,
        },
        {  //BISHOP EG
           264,   253,   257,   272,   270,   271,   257,   274,
           258,   269,   273,   264,   271,   257,   270,   236,
           272,   273,   271,   284,   268,   280,   269,   259,
           280,   285,   281,   286,   284,   274,   273,   262,
           264,   274,   287,   279,   281,   287,   263,   263,
           257,   273,   278,   287,   289,   277,   264,   252,
           262,   259,   262,   278,   279,   265,   267,   253,
           246,   263,   257,   271,   267,   265,   246,   253,
        },
        {  //ROOK EG
           482,   479,   482,   476,   473,   469,   467,   471,
           477,   487,   481,   472,   471,   470,   467,   464,
           475,   473,   475,   469,   464,   461,   464,   459,
           474,   471,   473,   470,   468,   467,   459,   455,
           469,   472,   477,   475,   471,   467,   459,   454,
           462,   467,   466,   466,   467,   461,   450,   450,
           468,   466,   473,   473,   468,   464,   460,   463,
           469,   475,   474,   483,   470,   464,   469,   449,
        },
        {  //QUEEN EG
           909,   911,   917,   930,   905,   921,   900,   929,
           894,   904,   918,   939,   931,   940,   923,   860,
           882,   899,   924,   915,   942,   919,   892,   891,
           887,   915,   912,   930,   947,   946,   928,   907,
           898,   905,   912,   929,   931,   915,   909,   900,
           878,   886,   918,   905,   913,   907,   911,   894,
           900,   902,   897,   905,   898,   878,   875,   882,
           894,   893,   895,   885,   896,   889,   889,   869,
        },
        {  //KING EG
           -56,   -24,   -23,   -20,   -14,    -5,   -10,   -34,
           -21,     3,    -1,    -3,     2,    19,    18,     3,
           -17,     7,     7,     7,    12,    23,    29,     9,
           -26,    -4,     8,    14,    13,    21,    17,     2,
           -36,    -8,     8,    17,    21,    20,     9,    -8,
           -30,    -7,    15,    24,    26,    20,     6,    -7,
           -30,    -9,     8,    18,    17,    11,    -3,   -19,
           -34,   -28,   -17,   -10,   -22,   -12,   -30,   -51,
        }};
    }
}
