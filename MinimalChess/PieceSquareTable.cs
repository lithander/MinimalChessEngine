using System;
using System.Collections.Generic;
using System.Text;

namespace MinimalChess
{
    static class PST
    {
        /*
        PST's taken from Rustic
        https://github.com/mvanthoor/rustic
        Copyright(C) 2019-2021, Marcel Vanthoor
        */

        public static int[] King = new int[]
        {
            0,    0,     0,     0,    0,    0,    0,    0,
            0,    0,     0,     0,    0,    0,    0,    0,
            0,    0,     0,     0,    0,    0,    0,    0,
            0,    0,     0,    20,   20,    0,    0,    0,
            0,    0,     0,    20,   20,    0,    0,    0,
            0,    0,     0,     0,    0,    0,    0,    0,
            0,    0,     0,   -10,  -10,    0,    0,    0,
            0,    0,    20,   -10,  -10,    0,   20,    0,
        };

        public static int[] Queen = new int[]
        {
            -30,  -20,  -10,  -10,  -10,  -10,  -20,  -30,
            -20,  -10,   -5,   -5,   -5,   -5,  -10,  -20,
            -10,   -5,   10,   10,   10,   10,   -5,  -10,
            -10,   -5,   10,   20,   20,   10,   -5,  -10,
            -10,   -5,   10,   20,   20,   10,   -5,  -10,
            -10,   -5,   -5,   -5,   -5,   -5,   -5,  -10,
            -20,  -10,   -5,   -5,   -5,   -5,  -10,  -20,
            -30,  -20,  -10,  -10,  -10,  -10,  -20,  -30
        };

        public static int[] Rook = new int[]
        {
            0,   0,   0,   0,   0,   0,   0,   0,
           15,  15,  15,  20,  20,  15,  15,  15,
            0,   0,   0,   0,   0,   0,   0,   0,
            0,   0,   0,   0,   0,   0,   0,   0,
            0,   0,   0,   0,   0,   0,   0,   0,
            0,   0,   0,   0,   0,   0,   0,   0,
            0,   0,   0,   0,   0,   0,   0,   0,
            0,   0,   0,  10,  10,  10,   0,   0
        };

        public static int[] Bishop = new int[]
        {
            -20,    0,    0,    0,    0,    0,    0,  -20,
            -15,    0,    0,    0,    0,    0,    0,  -15,
            -10,    0,    0,    5,    5,    0,    0,  -10,
            -10,   10,   10,   30,   30,   10,   10,  -10,
              5,    5,   10,   25,   25,   10,    5,    5,
              5,    5,    5,   10,   10,    5,    5,    5,
            -10,    5,    5,   10,   10,    5,    5,  -10,
            -20,  -10,  -10,  -10,  -10,  -10,  -10,  -20
        };

        internal static int[] White = new int[]
        {
            56, 57, 58, 59, 60, 61, 62, 63,
            48, 49, 50, 51, 52, 53, 54, 55,
            40, 41, 42, 43, 44, 45, 46, 47,
            32, 33, 34, 35, 36, 37, 38, 39,
            24, 25, 26, 27, 28, 29, 30, 31,
            16, 17, 18, 19, 20, 21, 22, 23,
             8,  9, 10, 11, 12, 13, 14, 15,
             0,  1,  2,  3,  4,  5,  6,  7,
        };

        public static int[] Knight = new int[]
        {
            -20, -10,  -10,  -10,  -10,  -10,  -10,  -20,
            -10,  -5,   -5,   -5,   -5,   -5,   -5,  -10,
            -10,  -5,   15,   15,   15,   15,   -5,  -10,
            -10,  -5,   15,   15,   15,   15,   -5,  -10,
            -10,  -5,   15,   15,   15,   15,   -5,  -10,
            -10,  -5,   10,   15,   15,   15,   -5,  -10,
            -10,  -5,   -5,   -5,   -5,   -5,   -5,  -10,
            -20,   0,  -10,  -10,  -10,  -10,    0,  -20
        };

        public static int[] Pawn = new int[]
        {
             0,   0,   0,   0,   0,   0,   0,   0,
            60,  60,  60,  60,  70,  60,  60,  60,
            40,  40,  40,  50,  60,  40,  40,  40,
            20,  20,  20,  40,  50,  20,  20,  20,
             5,   5,  15,  30,  40,  10,   5,   5,
             5,   5,  10,  20,  30,   5,   5,   5,
             5,   5,   5, -30, -30,   5,   5,   5,
             0,   0,   0,   0,   0,   0,   0,   0
        };

        public static int[] KingEndgame = new int[]
        {
            -95,  -95,  -90,  -90,  -90,  -90,  -95,  -95,
            -95,  -50,  -50,  -50,  -50,  -50,  -50,  -95,
            -90,  -50,  -20,  -20,  -20,  -20,  -50,  -90,
            -90,  -50,  -20,    0,    0,  -20,  -50,  -90,
            -90,  -50,  -20,    0,    0,  -20,  -50,  -90,
            -90,  -50,  -20,  -20,  -20,  -20,  -50,  -90,
            -95,  -50,  -50,  -50,  -50,  -50,  -50,  -95,
            -95,  -95,  -90,  -90,  -90,  -90,  -95,  -95,
        };

        internal static int Flip(int index)
        {
            int rank = index / 8;
            int file = index % 8;
            //flip rank
            return (7 - rank) * 8 + file;
        }
    }
}
